version: '3.8'

services:
  db:
    image: postgres:13
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      # O Postgres sabe ler o segredo de um arquivo
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    networks:
      - internal
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  migrations:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: loyalfood-backend:latest # Keep image for pushing to registry
    depends_on:
      - db # Changed from postgres to db
    environment:
      DB_PASSWORD_FILE: /run/secrets/postgres_password # Adjusted secret name
      PORT: 5000
      NODE_ENV: production
      DB_HOST: db # Changed from postgres to db
      DB_PORT: 5432
      DB_NAME: loyalfood
      DB_USER: postgres
      JWT_EXPIRES_IN: 7d
      FRONTEND_URL: https://loyalfood.towersfy.com
      BACKEND_URL: https://apiloyalfood.towersfy.com
      REACT_APP_API_URL: https://apiloyalfood.towersfy.com/api
    command: >
      /bin/sh -c "
        /usr/src/app/scripts/wait-for-it.sh db 5432 -- \ 
        echo 'Database is up, running migrations...' && \ 
        npx sequelize-cli db:migrate --config src/config/config.js --migrations-path migrations && \ 
        echo 'Running seeders...' && \ 
        npx sequelize-cli db:seed:all --config src/config/config.js --seeders-path seeders
      "
    networks:
      - internal # Changed from towersfy_network to internal
    secrets:
      - postgres_password # Adjusted secret name
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: loyalfood-backend:latest # Keep image for pushing to registry
    depends_on:
      - migrations # Ensure migrations run first
    environment:
      DB_PASSWORD_FILE: /run/secrets/postgres_password # For production secrets
      JWT_SECRET_FILE: /run/secrets/jwt_secret # For production secrets
      PORT: 5000 # Changed from 3001 to 5000
      NODE_ENV: production
      DB_HOST: db # Changed from postgres to db
      DB_PORT: 5432
      DB_NAME: loyalfood
      DB_USER: postgres
      JWT_EXPIRES_IN: 7d
      FRONTEND_URL: https://loyalfood.towersfy.com
      BACKEND_URL: https://apiloyalfood.towersfy.com
      REACT_APP_API_URL: https://apiloyalfood.towersfy.com/api
    networks:
      - traefik-public
      - internal
    volumes:
      - uploads:/usr/src/app/uploads # Keeping current volume mapping
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
      - jwt_secret
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`apiloyalfood.towersfy.com`)"
        - "traefik.http.routers.backend.entrypoints=websecure"
        - "traefik.http.routers.backend.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.backend.loadbalancer.server.port=5000" # Changed from 3001 to 5000
        - "traefik.http.routers.backend-uploads.rule=Host(`apiloyalfood.towersfy.com`) && PathPrefix(`/uploads`)"
        - "traefik.http.routers.backend-uploads.entrypoints=websecure"
        - "traefik.http.routers.backend-uploads.tls.certresolver=letsencryptresolver"
        - "traefik.http.routers.backend-uploads.priority=100"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-https://apiloyalfood.towersfy.com/api}
    image: loyalfood-frontend:latest
    environment:
      PORT: 5000 # Added from old compose, though Nginx serves on 80
      NODE_ENV: production # Added from old compose
      FRONTEND_URL: https://loyalfood.towersfy.com
      BACKEND_URL: https://apiloyalfood.towersfy.com
      REACT_APP_API_URL: https://apiloyalfood.towersfy.com/api
    networks:
      - traefik-public
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`loyalfood.towersfy.com`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.frontend.loadbalancer.server.port=80"

volumes:
  pgdata:
  uploads:

networks:
  traefik-public:
    external: true
  internal:
    driver: overlay

# Define os secrets que ser√£o usados pela stack
# Estes secrets devem ser criados no Docker Swarm ANTES de fazer o deploy
secrets:
  postgres_db:
    external: true
  postgres_user:
    external: true
  postgres_password:
    external: true
  jwt_secret:
    external: true
