version: '3.8'

# Âncora para reusar variáveis de ambiente
x-environment: &environment
  NODE_ENV: production
  DB_HOST: postgres
  DB_PORT: 5432
  DB_NAME: feedeliza
  DB_USER: postgres
  DB_PASSWORD_FILE: /run/secrets/db_password
  JWT_SECRET_FILE: /run/secrets/jwt_secret
  JWT_EXPIRES_IN: 7d
  REDIS_URL: redis://redis:6379
  FRONTEND_URL: https://feedelizapro.towersfy.com
  BACKEND_URL: https://feedelizaapi.towersfy.com
  REACT_APP_API_URL: https://feedelizaapi.towersfy.com/api

services:
  postgres:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - towersfy_network
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - PG_MAX_CONNECTIONS=500
    secrets:
      - db_password
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - towersfy_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  migrations:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: feedeliza-backend:latest
    depends_on:
      - postgres
    environment:
      <<: *environment
    command: >
      /bin/sh -c "
        ./scripts/wait-for-it.sh postgres:5432 --timeout=30 -- \
        echo 'Database is up, running migrations...' && \
        npx sequelize-cli db:migrate && \
        echo 'Running seeders...' && \
        npx sequelize-cli db:seed:all
      "
    networks:
      - towersfy_network
    secrets:
      - db_password
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: feedeliza-backend:latest
    depends_on:
      - migrations
      - redis
    environment:
      <<: *environment
    networks:
      - towersfy_network
    volumes:
      - uploads_data:/usr/src/app/uploads
    secrets:
      - db_password
      - jwt_secret
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`feedelizaapi.towersfy.com`)"
        - "traefik.http.routers.backend.entrypoints=websecure"
        - "traefik.http.routers.backend.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.backend.loadbalancer.server.port=5000"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: https://feedelizaapi.towersfy.com/api
    image: feedeliza-frontend:latest
    networks:
      - towersfy_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`feedelizapro.towersfy.com`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.frontend.loadbalancer.server.port=80"

networks:
  towersfy_network:
    external: true

volumes:
  postgres_data:
    external: true
    name: postgres_data
  uploads_data:
  redis_data:

secrets:
  db_password:
    external: true
  jwt_secret:
    external: true
