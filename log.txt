main.81efd284.js:2 [Violation] 'message' handler took 160ms
react-dom.production.min.js:24 Error: <g> attribute transform: Expected number, "translate(NaN,NaN)".
b @ react-dom.production.min.js:24
Ks @ react-dom.production.min.js:230
xc @ react-dom.production.min.js:280
bc @ react-dom.production.min.js:279
vc @ react-dom.production.min.js:279
gc @ react-dom.production.min.js:279
oc @ react-dom.production.min.js:267
w @ scheduler.production.min.js:13
O @ scheduler.production.min.js:14
react-dom.production.min.js:24 Error: <svg> attribute viewBox: Expected number, "0 0 undefined undefi‚Ä¶".
b @ react-dom.production.min.js:24
Ks @ react-dom.production.min.js:230
xc @ react-dom.production.min.js:280
bc @ react-dom.production.min.js:279
vc @ react-dom.production.min.js:279
gc @ react-dom.production.min.js:279
oc @ react-dom.production.min.js:267
w @ scheduler.production.min.js:13
O @ scheduler.production.min.js:14
react-word-cloud.es.js:123 Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'length')
    at S.j.start (react-word-cloud.es.js:123:121)
    at react-word-cloud.es.js:471:12
    at new Promise (<anonymous>)
    at react-word-cloud.es.js:418:10
    at react-word-cloud.es.js:1021:7
    at rl (react-dom.production.min.js:243:332)
    at wc (react-dom.production.min.js:285:111)
    at react-dom.production.min.js:281:391
    at w (scheduler.production.min.js:13:203)
    at MessagePort.O (scheduler.production.min.js:14:128)
S.j.start @ react-word-cloud.es.js:123
(an√¥nimo) @ react-word-cloud.es.js:471
(an√¥nimo) @ react-word-cloud.es.js:418
(an√¥nimo) @ react-word-cloud.es.js:1021
rl @ react-dom.production.min.js:243
wc @ react-dom.production.min.js:285
(an√¥nimo) @ react-dom.production.min.js:281
w @ scheduler.production.min.js:13
O @ scheduler.production.min.js:14
react-dom.production.min.js:24 Error: <g> attribute transform: Expected number, "translate(NaN,NaN)".
b @ react-dom.production.min.js:24
Ks @ react-dom.production.min.js:230
xc @ react-dom.production.min.js:280
bc @ react-dom.production.min.js:279
vc @ react-dom.production.min.js:279
gc @ react-dom.production.min.js:279
oc @ react-dom.production.min.js:267
w @ scheduler.production.min.js:13
O @ scheduler.production.min.js:14
react-dom.production.min.js:24 Error: <svg> attribute viewBox: Expected number, "0 0 undefined undefi‚Ä¶".
b @ react-dom.production.min.js:24
Ks @ react-dom.production.min.js:230
xc @ react-dom.production.min.js:280
bc @ react-dom.production.min.js:279
vc @ react-dom.production.min.js:279
gc @ react-dom.production.min.js:279
oc @ react-dom.production.min.js:267
w @ scheduler.production.min.js:13
O @ scheduler.production.min.js:14
react-word-cloud.es.js:123 Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'length')
    at S.j.start (react-word-cloud.es.js:123:121)
    at react-word-cloud.es.js:471:12
    at new Promise (<anonymous>)
    at react-word-cloud.es.js:418:10
    at react-word-cloud.es.js:1021:7
    at rl (react-dom.production.min.js:243:332)
    at wc (react-dom.production.min.js:285:111)
    at react-dom.production.min.js:281:391
    at w (scheduler.production.min.js:13:203)
    at MessagePort.O (scheduler.production.min.js:14:128)
S.j.start @ react-word-cloud.es.js:123
(an√¥nimo) @ react-word-cloud.es.js:471
(an√¥nimo) @ react-word-cloud.es.js:418
(an√¥nimo) @ react-word-cloud.es.js:1021
rl @ react-dom.production.min.js:243
wc @ react-dom.production.min.js:285
(an√¥nimo) @ react-dom.production.min.js:281
w @ scheduler.production.min.js:13
O @ scheduler.production.min.js:14
Dito pelo ChatGPT:

Perfeito, mestre üëá
esses logs confirmam 100% o que eu suspeitava: o componente react-word-cloud est√° quebrando por falta de dados v√°lidos ou dimens√µes indefinidas no momento da renderiza√ß√£o.

Vamos fazer o diagn√≥stico completo com base no stack trace e eu te deixo a corre√ß√£o exata.

üíÄ O que os erros realmente est√£o dizendo
1Ô∏è‚É£ translate(NaN,NaN)

<g> attribute transform: Expected number, "translate(NaN,NaN)"

üëâ Isso √© gerado pelo D3 (que o react-word-cloud usa internamente).
Significa que o c√°lculo da posi√ß√£o (x, y) de uma palavra resultou em NaN.

Motivo mais comum:

width e height do container SVG s√£o undefined quando o componente monta.

2Ô∏è‚É£ viewBox: Expected number, "0 0 undefined undefined"

<svg> attribute viewBox: Expected number, "0 0 undefined undefined"

üëâ O SVG do wordcloud tenta desenhar com dimens√µes inv√°lidas.
Ou seja: size (ou o bounding box do container) n√£o tem n√∫meros v√°lidos ainda.

3Ô∏è‚É£ Cannot read properties of undefined (reading 'length')

at S.j.start (react-word-cloud.es.js:123:121)

üëâ Esse √© o mais cr√≠tico.
O componente est√° tentando acessar words.length, mas words √© undefined.

Ent√£o voc√™ tem dois problemas simult√¢neos:

A prop words chega undefined ou vazia.

O componente √© renderizado antes de o container ter dimens√µes v√°lidas.

üß† Diagn√≥stico t√©cnico

Esses tr√™s juntos acontecem quase sempre quando o c√≥digo √© algo tipo:

<ReactWordcloud words={data} />


mas data ainda est√° sendo carregado via API (useEffect, fetch, etc.),
ou quando o componente pai ainda n√£o definiu o tamanho do container (ex: width: 100%, mas o pai tem height: auto).

‚úÖ Solu√ß√£o segura e √† prova de erro

Aqui vai o padr√£o que elimina os tr√™s erros:

import React, { useEffect, useState, useRef } from "react";
import ReactWordcloud from "react-wordcloud";

export default function WordCloudContainer({ wordsData }) {
  const ref = useRef(null);
  const [size, setSize] = useState([0, 0]);

  useEffect(() => {
    if (ref.current) {
      const { offsetWidth, offsetHeight } = ref.current;
      setSize([offsetWidth, offsetHeight]);
    }
  }, [ref.current]);

  // S√≥ renderiza quando tiver dados e dimens√µes v√°lidas
  const hasWords = Array.isArray(wordsData) && wordsData.length > 0;
  const hasSize = size[0] > 0 && size[1] > 0;

  const options = {
    rotations: 2,
    rotationAngles: [-90, 0],
    fontSizes: [20, 60],
  };

  return (
    <div
      ref={ref}
      style={{
        width: "100%",
        height: "400px",
        background: "#111",
      }}
    >
      {hasWords && hasSize ? (
        <ReactWordcloud words={wordsData} options={options} size={size} />
      ) : (
        <p style={{ color: "#fff", textAlign: "center", paddingTop: "150px" }}>
          Carregando nuvem de palavras...
        </p>
      )}
    </div>
  );
}

‚öôÔ∏è Como usar
const words = [
  { text: "React", value: 50 },
  { text: "Node.js", value: 30 },
  { text: "JavaScript", value: 60 },
];

<WordCloudContainer wordsData={words} />;